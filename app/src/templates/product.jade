| {% assign add_to_cart = 'Add to cart' %}
| {% assign sold_out = 'Sold Out' %}
| {% assign unavailable = 'Unavailable' %}

article(itemscope, itemtype="http://schema.org/Product")

	meta(itemprop="url", content="{{ shop.url }}{{ product.url }}")
	meta(itemprop="image", content="{{ product | img_url: 'grande' }}")

	form(action="/cart/add", method="post", enctype="multipart/form-data")

		div

			| {% if product.images.size == 0 %}
			img(src="{{ '' | img_url: 'grande' }}", alt="")
			| {% else %}

			|	{% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
			a(href="{{ featured_image | img_url: '1024x1024' }}")
				img(src="{{ featured_image | img_url: 'grande' }}", alt="{{ product.title | escape }}")

			| {% if product.images.size > 1 %}
			ul
				| {% for image in product.images %}
				li
					a(href="{{ image | img_url: '1024x1024' }}")
						img(src="{{ image | img_url: 'large' }}" alt="{{ image.alt | escape }}")
				| {% endfor %}
			| {% endif %}
			| {% endif %}


		div

			h1(itemprop="name")
				| {{ product.title }}

			| {% assign product_vendor_handle = product.vendor | handle %}
			| {% if collections[product_vendor_handle].handle == product_vendor_handle %}
			| 	{% assign vendor_url = collections[product_vendor_handle].url %}
			| {% else %}
			| 	{% assign vendor_url = product.vendor | url_for_vendor %}
			| {% endif %}
			h2(itemprop="brand")
				| {{ product.vendor | link_to: vendor_url }}

			div(itemprop="description")
				| {{ product.description }}

			div(data-id="{{ product.id }}")
				| {{ product.metafields.spr.reviews }}

			div(itemprop="offers", itemscope, itemtype="http://schema.org/Offer")
				meta(itemprop="priceCurrency", content="{{ shop.currency }}")
				| {% if product.available %}
				link(itemprop="availability", href="http://schema.org/InStock")
				| {% else %}
				link(itemprop="availability", href="http://schema.org/OutOfStock")
				| {% endif %}
				p
					| {% assign variant = product.selected_or_first_available_variant %}
					| {% if product.compare_at_price > product.price %}
					span(itemprop="price")
						| {{ variant.price | money }}
					s
						| {{ variant.compare_at_price | money }}
					| {% else %}
					span(itemprop="price")
						| {{ variant.price | money }}
					| {% endif %}

			| {% assign hide_default_title = false %}
			| {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
			|	{% assign hide_default_title = true %}
			| {% endif %}


			div(class="{% if hide_default_title %} hidden{% endif %}")
				select(id="product-select", name="id")
					| {% for variant in product.variants %}
					| 	<option{% if variant == product.selected_or_first_available_variant %} selected{% endif %} value="{{ variant.id }}">
					| 	{{ variant.title }} - {{ variant.price | money }}
					| 	</option>
					| {% endfor %}

			div
				p
					| {{ '%s is back-ordered. We will ship it separately in 10 to 15 days.' | replace: '%s', '<span id="selected-variant"></span>' }}

			div
				input(type="submit", name="add", id="add", class="primary button", value="{{ add_to_cart | escape }}")


			| {% if collection %}
			| 	{% if collection.previous_product or collection.next_product %}
			div
				| {% if collection.previous_product %}
				|	{% capture prev_url %}{{ collection.previous_product}}#content{% endcapture %}
				span
					| {{ '&larr; Previous Product' | link_to: prev_url }}
				| {% endif %}

				| {% if collection.next_product %}
				|	{% capture next_url %}{{ collection.next_product}}#content{% endcapture %}
				span
					| {{ 'Next Product &rarr;' | link_to: next_url }}</span>
				| {% endif %}
			|	{% endif %}
			| {% endif %}
script.
	var selectCallback = function(variant, selector) {

		if (variant) {

			// Swap image.
			if (variant.featured_image) {
				var newImage = variant.featured_image; // New image object.
				var mainImageDomEl = jQuery('.product-photo-container img')[0]; // DOM element of main image we need to swap.
				Shopify.Image.switchImage(newImage, mainImageDomEl, switchImage); // Define switchImage (the callback) in your theme's JavaScript file.
			}

			// Selected a valid variant that is available.
			if (variant.available) {

				// Enabling add to cart button.
				jQuery('#add').removeClass('disabled').prop('disabled', false).val({{ add_to_cart | json }});

				// If item is backordered yet can still be ordered, we'll show special message.
				if (variant.inventory_management && variant.inventory_quantity <= 0) {
					jQuery('#selected-variant').html({{ product.title | json }}{% unless hide_default_title %} + ' - ' + variant.title{% endunless %});
					jQuery('#backorder').removeClass("hidden");
				} else {
					jQuery('#backorder').addClass("hidden");
				}

			} else {
				// Variant is sold out.
				jQuery('#backorder').addClass('hidden');
				jQuery('#add').val({{ sold_out | json }}).addClass('disabled').prop('disabled', true);
			}

			// Whether the variant is in stock or not, we can update the price and compare at price.
			if ( variant.compare_at_price > variant.price ) {
				jQuery('#product-price').html('<span class="product-price on-sale">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") +'</span>'+'&nbsp;<s class="product-compare-price">'+Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}")+ '</s>');
			} else {
				jQuery('#product-price').html('<span class="product-price">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") + '</span>' );
			}

		} else {
			// variant doesn't exist.
			jQuery('#product-price').empty();
			jQuery('#backorder').addClass('hidden');
			jQuery('#add').val({{ unavailable | json }}).addClass('disabled').prop('disabled', true);
		}

	};

	jQuery(function($) {

		new Shopify.OptionSelectors('product-select', { product: {{ product | json }}, onVariantSelected: selectCallback, enableHistoryState: true });

		// Add label if only one product option and it isn't 'Title'.
		{% if product.options.size == 1 and product.options.first != 'Title' %}
			$('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
		{% endif %}

	});

	Shopify.Image.preload({{ product.images | json }}, 'grande');
	Shopify.Image.preload({{ product.images | json }}, '1024x1024');